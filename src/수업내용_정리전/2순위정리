프로세서 = cpu
우린 cpu를 통해서 프로세싱을 함
그걸 처리하기 위해서 연산자가 필요함
오퍼랜더 =
오퍼레이터는 데이터 입장에서 연산을 당하는 것
피연산자를 처리하는것을 오퍼레이터라함
증강은 ++ 이런거
산술은 덧셈 곱셈 뺄셈 나누기 나머지 연산까지
오버플로우 흘러넘치다
언더플로우 밑바닥이 터짐
오버랑 언더 플로우가 발생하는 이유

부호연산 : 변수의 부호를 유지하거나 변경한다.
//정수 타입 (byte, short, int)의 연산결과는 int타입

증강연산자 : 변수의 값을 1 증가시키거나 1감소시킴
ex) ++x, --x 엑스에 이렇게 하는게 전치 증가 연산자prefix라 칭함 ==> i = i + 1
    x++, x-- 뒤에 붙을떈 postfix ==> i = i - 1;

산술연산자 : + - * / %(나머지)
모든 피연산자는 int 타입으로 자동 변환 후 연산
모든 피연산자는 long 타입으로 promotion 연산

오버플로우 타입의 허용하는 최대값을 벗어나는것

언더플로우
타입이 허용하는 최소값을 벗어나는것

정수 연산
산술 연산을 정확하게 계산하려면 실수 타입을 사용하지 않는것이 좋음
정확한 계산이 필요하면 정수 연산으로 변경

나눗셈 연산 예외 방지

비교연산자
동등 (== !=), 크기 (<, <=, > >=)를 평가해서 boolean 타입인 true/false를 산출
흐름 제어문인 조건문, 반복문에서 실행 흐름을 제어할 때 주로 사용


논리 연산자
논리 연산산자는 논리곱 (&&), 논리합 (||), 배타적논리합(^), 논리 부정 (!) 연산 수행
논리연산자 표로 정리


비트 연산자
& bit 단위로 논리 연산을 수행한다.
대상은 bit인 0과 1
피연산가자 2진수 0과1로 저장되는 정수타입 (byte, short, int, long)만 대상이 된디ㅏ
실수 타입(float, double) bit 연산의 대상이 될 수 없다.
bit 연산 표로 정리하고 개념 정리
계산법도 정리

비트이동연산자
표로 정리 하면서 개념 한번 머리에 넣고 정리


대입연산자, 복합대입연산자 +=, -= *= /= %= 이런거
개념 정리 사용법도 정리

삼항연산자
(피연산자? 피연산자 : 피연산자)

여기까지 연산자