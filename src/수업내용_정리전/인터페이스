1.1 인터페이스 (interface)
    두 장치(서로 다른 객체)를 연결하는 접속(연결하는 역할) 도구
    서로다른 객체를 연결하는 역할을 하는 객체
    자체의 객체를 만들수 없다 = new X

    인터페이스는 기능적인 요소들이 변경되면 안됨


    기능의 작은 모듈이다

    사용하는 의미
    - loose coupling(느슨한 결함) 관계를 위해 사용
      다중상속을 구현 할 수 있다.

      public class Cat extends Animal implements sound, eat, sleep

   1.2   인터페이스도 하나의 타입이므로 변수의 타입으로 사용할 수 있다.
      인터페이스는 참조타입이다.
      인터페이스 변수에는 객체의 참조값을 저장할 수 있다.
      null 초기값

      RemtoeControl rc = null;
      rc = new Television();
      rc.turnOff();
      rc.turnOn();
      ===========================
      rc = new Cleaner();
      rc.turnOff();     //rc 고유기능
      rc.turnOn();      //rc 고유기능
      rc.cleaning();    //Cleaner의 기능
      ===========================

이름 명명 방식
- 파스칼 방식 : 클래스 PersonInfo
- 카멜 방식 : 메소드 setAge()
- 스네이크 방식 : 상수 MAX_VALUE

1.3 상수필드
    public static final 특징을 가지고 있는 필드(상수) 선언 가능

1.4 default

1.5 정적 메소드
    추상메소드와 디폴트메소드는 구현객체가 필요하다.


1.6 private 메소드
    인터페이스의 구성요소인 상수필드, 추상메소드, 디폴트메소드, 정적 메소드는 모두 public을 가져야 한다,.
    인터페이스의 public의 의미는 외부엥서 누구나 호출, 접근 할 수 있다 라는 의미이다

    외부에서 접근할 수 없는 기능으로 선언할 수 있다. private 메소드를 허용
    1. private 메소드 (구현 객체가 필요한 메소드)
        디폴트 메소드 안에서만 호출이 가능
    2. private